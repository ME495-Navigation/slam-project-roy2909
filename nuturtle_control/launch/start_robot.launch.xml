
<launch>
    <arg name="cmd_src" default="circle"
        description="Source of cmd_vel commands, decides which node publishes command vel to the turtlebot - circle, teleop, none" />
    <arg name="robot" default="nusim"
        description="Launch in simulation or real robot - nusim, localhost, none" />
    <arg name="use_rviz" default="true"
        description="Determines whether to use rviz or not - true or false" />
    <arg name="body_id" default="blue/base_footprint"
        description="body frame of the robot" />
    <arg name="odom_id" default="odom" description="odometry frame" />
    <arg name="wheel_left" default="wheel_left_joint" description="left wheel joint" />
    <arg name="wheel_right" default="wheel_right_joint"
        description="The name of the right wheel joint" />


    <node pkg="nuturtle_control" exec="turtle_control" name="turtle_control"
        if="$(eval '\'$(var robot)\' == \'nusim\'')">
        <param from="$(find-pkg-share nuturtle_description)/config/diff_params.yaml" />
        <remap from="wheel_cmd" to="red/wheel_cmd" />
        <remap from="sensor_data" to="red/sensor_data" />
        <remap from="joint_states" to="red/joint_states" />
    </node>

    <node pkg="nuturtle_control" exec="turtle_control" name="turtle_control"
        if="$(eval '\'$(var robot)\' == \'localhost\'')">
        <remap from="sensor_data" to="blue/sensor_data" />
        <param from="$(find-pkg-share nuturtle_description)/config/diff_params.yaml" />
    </node>

    <node pkg="teleop_twist_keyboard" exec="teleop_twist_keyboard" name="teleop_twist_keyboard"
        output="screen" launch-prefix="xterm -e" if="$(eval '\'$(var cmd_src)\' == \'teleop\'')" />

        <include file="$(find-pkg-share nuturtle_description)/launch/load_one.launch.py"
        if="$(eval '\'$(var robot)\' == \'nusim\'')">
            <arg name="color" value="red" />
            <arg name="use_rviz" value="false" />
          </include>
        <!-- Configuration file for simulator -->
          <arg name="config_file" default="basic_world.yaml" 
           description="Initial configuration for the simulator (.yaml)"/>
        <!-- Simulation node -->
          <node pkg="nusim" exec="nusim_ex" name="nusim">
            <param from="$(find-pkg-share nusim)/config/$(var config_file)"/>
          </node>
    
    <include file="$(find-pkg-share nuturtle_description)/launch/load_one.launch.py"
        if="$(eval '\'$(var robot)\' == \'nusim\'')">
        <arg name="color" value="blue" />
        <arg name="use_rviz" value="false" />
        <arg name="use_jsp" value="true" />
    </include>

    <include file="$(find-pkg-share nuturtle_description)/launch/load_one.launch.py"
    if="$(eval '\'$(var robot)\' == \'localhost\'')">
    <arg name="color" value="blue" />
    <arg name="use_rviz" value="false" />
    <arg name="use_jsp" value="true" />
</include>



    <node pkg="nuturtle_control" exec="odometry" name="odometry">
        <param from="$(find-pkg-share nuturtle_description)/config/diff_params.yaml" />
        <param name="body_id" value="$(var body_id)" />
        <param name="odom_id" value="$(var odom_id)" />
        <param name="wheel_left" value="blue/wheel_left_joint" />
        <param name="wheel_right" value="blue/wheel_right_joint" />
        <remap from="joint_states" to="blue/joint_states" />
    </node>


    <node pkg="nuturtle_control" exec="circle" name="circle"
        if="$(eval '\'$(var cmd_src)\' == \'circle\'')">
        <param name="frequency" value="100" />

    </node>


    <node name="rviz2" pkg="rviz2" exec="rviz2" args="-d $(find-pkg-share nuturtle_control)/config/nuturtle_control.rviz"
    if="$(eval '\'$(var robot)\' != \'nusim\'')"/>

    <node name="rviz2" pkg="rviz2" exec="rviz2" args="-d $(find-pkg-share nuturtle_control)/config/nuturtle_nusim.rviz"
    if="$(eval '\'$(var robot)\' == \'nusim\'')"/>



    <node pkg="tf2_ros" exec="static_transform_publisher" name="nusim_blue_footprint"
        args="0 0 0 0 0 0 1 nusim/world odom" />

    


</launch>  